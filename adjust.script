

#these constans depend on the sensor model, update if needed.
Sensor_size = [5,5] #dimension of the sensor matrix
Sensor_num = Sensor_size[0]*Sensor_size[1]
TCP_pos = [2,2] #location of the TCP wrt the sensor coordinates.




def gripped(sensor_values):    
    i=0
    j=0
    cell1 = [-2,-2]
    while(i<Sensor_size[1]):
      if(sensor_values[5*j+i]>200):
        if(cell1[0]==-2):
          cell1=[j,i]
        elif(i != cell1[1]+1):
          return True
        end
      end
      i=i+1
    end
    
    i=i-1 
    j=j+1 
    while(j<Sensor_size[0]):
      if(sensor_values[5*j+i]>200):
        if(cell1[0]==-2):
          cell1=[j,i]
        elif(j != cell1[0]+1):
          return True
        end
      end
      j=j+1
    end
  
    j=j-1 
    i=i-1 
    while(i>-1):
      if(sensor_values[5*j+i]>200):
        if(cell1[0]==-2):
          cell1=[j,i]
        elif(i != cell1[1]-1):
          return True
        end
      end
      i=i-1
    end
  
    i=i+1 
    j=j-1 
    while(j>-1):
      if(sensor_values[5*j+i]>200):
        if(cell1[0]==-2):
          cell1=[j,i]
        elif(j != cell1[0]-1 and j !=cell1[0]+1):
          return True
        end
      end
      j=j-1
    end


    return False
  end
  
  def receive_sensor_values2():
    
    sensor_values = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]
    
    #read Modbus signals and store them in the array
    i = 0
    while(i<length(sensor_values)):
        signal_name = "output_" + to_str(i + 1)
        value = modbus_get_signal_status(signal_name, False)
        sensor_values[i] = value
        i = i + 1
    end
    
    return sensor_values

  end   
 

  def average(point1,point2,value1,value2):
    #print the two points
    textmsg("p1: ",point1)
    textmsg("p2: ",point2)
    #if they have the same j coordinate, get the average of the i coordinate.
    if(point1[0]==point2[0]):
      weighted_interpolation = (point1[1]*value1+point2[1]*value2)/(value1+value2)
      textmsg([point1[0],weighted_interpolation])
      return [point1[0],weighted_interpolation]
    #if they have the same i coordinate, get the average of the j coordinate.
    else:
      weighted_interpolation = (point1[0]*value1+point2[0]*value2)/(value1+value2)
      textmsg([weighted_interpolation,point1[1]])
      return [weighted_interpolation,point1[1]]
    end
  end


  def get_angle(point1,point2):
    if(point2[0]-point1[0] ==0):
      return 1.570796
    end
  
    return atan((point2[1]-point1[1])/(point2[0]-point1[0]))
  end
  
  def get_offset(point1,point2):
    offset = 0.005 #the distance between each two taxels in the sensor matrix in meters.
    #calculate the equation of the straight line.
    A = point2[1]-point1[1]
    B = point1[0]-point2[0]
    C = (point2[0]-point1[0])*point1[1]-(point2[1]-point1[1])*point1[0]

    y = (A*(-B*TCP_pos[0]+A*TCP_pos[1])-B*C)/(A*A+B*B) #calculate the i dimension of the intersection point.

    #calculate the perpendicular distance 
    num = norm(A*TCP_pos[0]+B*TCP_pos[1]+C)
    den = (sqrt(A*A+B*B))
    d=num/den     
    textmsg(d)

    
    if(y>2):
        return offset*d #mutiply the calculated distance by the distance between each two taxels in the sensor matrix to get the actual offset
    elif(y<2):
        return -offset*d
    else:
        x = (B*(B*TCP_pos[0]-A*TCP_pos[1])-A*C)/(A*A+B*B)
        if(x>2):
            return -offset*d
        else:
            return offset*d
        end
    end
end


def adjust(sensor_values,theta):
    #movej([-1.5504,-1.43396,1.9534,-2.09055,-1.56992,-3.117],a=0.5,v=0.5)  
    
    i=0
    j=0
    cell1=[-2,-2] #-2 means the cell is not updated.
    cell2=[-2,-2]
    #loop through first row.
    while(i<Sensor_size[1]):
      if(sensor_values[5*j+i]>200):
        #if cell1 is not updated then update it first.
        if(cell1[0]==-2):
          cell1=[j,i]
        #if the next active cell is adjacent to cell1, get their average.
        elif ((i == cell1[1]+1 or i==cell1[1]-1)and (j == cell1[0])):
          cell1 = average(cell1,[j,i],sensor_values[5*cell1[0]+cell1[1]],sensor_values[5*j+i])
        #else update cell2
        elif (cell2[0]==-2):
          cell2=[j,i]
        #if the next active cell is adjacent to cell2, get their average.
        elif((i == cell2[1]+1 or i==cell2[1]-1)and (j == cell2[0])):
          cell2=average(cell2,[j,i],sensor_values[5*cell2[0]+cell2[1]],sensor_values[5*j+i])
        end
      end
      i=i+1
    end
  
    #adjust the indices.
    i=i-1 
    j=j+1 
  
    #loop through last column.
    while(j<Sensor_size[0]):
      if(sensor_values[5*j+i]>200):
        #if cell1 is not updated then update it first.
        if(cell1[0]==-2):
          cell1=[j,i]
        #if the next active cell is adjacent to cell1, get their average.
        elif ((j == cell1[0]+1 or j==cell1[0]-1)and (i == cell1[1])):
          cell1 = average(cell1,[j,i],sensor_values[5*cell1[0]+cell1[1]],sensor_values[5*j+i])
        #else update cell2
        elif (cell2[0]==-2):
          cell2=[j,i]
        #if the next active cell is adjacent to cell2, get their average.
        elif((j == cell2[0]+1 or j==cell2[0]-1)and (i == cell2[1])):
          cell2=average(cell2,[j,i],sensor_values[5*cell2[0]+cell2[1]],sensor_values[5*j+i])
        end
      end
      j=j+1
    end
  
    #adjust the indices.
    j=j-1 
    i=i-1
    
    #loop through the last row.
    while(i>-1):
      if(sensor_values[5*j+i]>200):
        #if cell1 is not updated then update it first.
        if(cell1[0]==-2):
          cell1=[j,i]
        #if the next active cell is adjacent to cell1, get their average.
        elif ((i == cell1[1]+1 or i==cell1[1]-1)and (j == cell1[0])):
          cell1 = average(cell1,[j,i],sensor_values[5*cell1[0]+cell1[1]],sensor_values[5*j+i])
        #else update cell2
        elif (cell2[0]==-2):
          cell2=[j,i]
        #if the next active cell is adjacent to cell2, get their average.
        elif((i == cell2[1]+1 or i==cell2[1]-1)and (j == cell2[0])):
          cell2=average(cell2,[j,i],sensor_values[5*cell2[0]+cell2[1]],sensor_values[5*j+i])
        end
      end
      i=i-1
    end
  
    #adjust the indices.
    i=i+1 
    j=j-1 
  
    #loop through first column.
    while(j>0):
      if(sensor_values[5*j+i]>200):
        #if cell1 is not updated then update it first.
        if(cell1[0]==-2):
          cell1=[j,i]
        #if the next active cell is adjacent to cell1, get their average.
        elif ((j == cell1[0]+1 or j==cell1[0]-1)and (i == cell1[1])):
          cell1 = average(cell1,[j,i],sensor_values[5*cell1[0]+cell1[1]],sensor_values[5*j+i])
        #else update cell2
        elif (cell2[0]==-2):
          cell2=[j,i]
        #if the next active cell is adjacent to cell2, get their average.
        elif((j == cell2[0]+1 or j==cell2[0]-1)and (i == cell2[1])):
          cell2=average(cell2,[j,i],sensor_values[5*cell2[0]+cell2[1]],sensor_values[5*j+i])
        end
      end
      j=j-1
    end
    
    #get the inclination angle.
    beta= get_angle(cell1, cell2)
    #print the angle and the two points.
    textmsg(angle)
    textmsg(cell1)
    textmsg(cell2)
    #get the offset.
    offset=get_offset(cell1, cell2)
    #move to the required position with respect to the TCP, "pos_trans()" gives the coordinates wrt the base coordintes.
    pos=pose_trans(get_actual_tcp_pose(),p[0,offset,0,theta-beta,0,0])
    #move to the respective position.
    movej(pos,a=0.5,v=0.5)
  end


  def adjust_grip():
  
    # establish Modbus com
    modbus_ip = "194.94.86.20"
    slave_id = 255
    base_address = 100  # Starting address for the first register
    signal_type = 2  # Register input
    sensor_num = 25
    # Define the list to store sensor values
    sensor_values = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]
    
    #add modbus signal
    i = 0
    while(i<length(sensor_values)):
      signal_name = "output_" + to_str(i + 1)
      modbus_add_signal(modbus_ip, slave_id, base_address + i, signal_type, signal_name)
      modbus_set_signal_update_frequency(signal_name,10)
      i = i + 1
    end
    
  
  
    
    rq_set_speed_norm_multi_grippers(20.0) #set gripper motion speed 
    rq_set_force_norm_multi_grippers(5.0)  #set gripping force
    rq_move_norm_multi_grippers(100)    #close the gripper
    #check if the object is gripped
    while(not gripped(sensor_values)):
        
        sensor_values = receive_sensor_values2() #upgrade sensor reading

        if(rq_current_pos_norm()>90):  #stop if the gripper is fully closed
            break
        end
    end
    rq_move_and_wait_norm_multi_grippers(rq_current_pos_norm())  # stop the gripper
    textmsg("Sensor Values: ", sensor_values) #print the sensor values that ade the gripper stop
    
    adjust(sensor_values, 0) #call the function that adjusts the orientation.

  end

  adjust_grip()

  